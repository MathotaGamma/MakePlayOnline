https://makeplayonline.onrender.com/Static/API/CompVisJS/1.02.02/CompVisJS.js


_graphメソッドの使い方

・例:
const canvas = document.getElementById('canvas');
const id_ctx = CompVis._create_canvas(canvas,500,400);
let T = 0;
const data = CompVis._graph(id_ctx,function(t){
    return new CompVis(0,2*Math.PI*t+T).exp.pro(50*t);
},0,5,0.005,{radius:2});

setInterval(() => {
    T += 0.1;
    CompVis._re_graph(data);
},1000/60);




・引数:
id_ctx,func,start,end,step,params


・id_ctx:
必須。htmlのcanvasタグのelementをCompVis._create_canvasの引数に入れたときの戻り値。
例:
html >>
<html>
    ~~~
    <canvas id="canvas"></canvas>
    ~~~
</html>
javascript >>
const canvas = document.getElementById('canvas');
const id_ctx = CompVis._create_canvas(canvas,500,400);


・func:
必須。CompVisクラスの戻り値が必要。引数を変数として用いた関数。変数は実数値である。
※現在のバージョンでは、値の1が1pxに対応
例:
javascript >>
const func = function(t){
    return new CompVis(0,t).exp.pro(t);
}
この場合、t*e^itを描画する。


・start,end,step
必須。変数をstartからendまで間隔をstepとして動かす。


・params
任意。連想配列型。その他の設定を変更する。変更したい変数のみ記すことが可能。

thick >>
default:1
描画する線の太さ

radius >>
default:0
func上を変数が動いた点に描画される円の半径

line_color,point_color >>
default:"#000"(黒),"#a00000"(赤)
線、点の色。"# (rgbのHTMLカラーコード)"

timeout >>
default:20000
計算時間の上限。整数値。単位はms(ミリ秒)。0以下で計算時間の上限なし。
タイムアウトするとErrorを発生させる(Too longエラー)。


・再描画
CompVis._re_graphで再描画できる。
再描画する場合、CompVis._graphの戻り値を変数に保存しておかなければいけない(複数個_graphで作成したものを動かす場合は、それぞれの戻り値を配列に入れて_re_graphの引数に入れる)。
funcより前である変数を宣言して、その変数をfuncで使うことで、その変数の値を変更してグラフを動かすことができるようになる。
例:
javascript >>
const id_ctx = ~~~
let T = 0; <-
const data = CompVis._graph(id_ctx,function(t){ <-
    return new CompVis(0,2*Math.PI*t+T).exp.pro(50*t); <-
},0,5,0.005,{radius:2});

setInterval(() => {
    T += 0.1;<-
    CompVis._re_graph(data); <-
},1000/60);


全体のコード例
<!DOCTYPE HTML>
<html lang="ja">
    <head>
        <meta charset="utf-8">
        <title>CompVisJS Demo — CompVis._graph</title>
        <script src="https://makeplayonline.onrender.com/Static/API/CompVisJS/1.02.02/CompVisJS.js"></script>
    </head>
    <body>
        <canvas id="canvas"></canvas>
        <script>
            let T = 0;
            const canvas = document.getElementById('canvas');
            const id_ctx = CompVis._create_canvas(canvas,500,400);
            function func1(t){
                let circle1 = new CompVis(0,Math.PI*T/4).exp.pro(150);
                let circle2 = new CompVis(0,4*Math.PI*t).exp.pro(250*Math.sin(T));
                return circle1.add(circle2);
            }
            function func2(t){
                let circle = new CompVis(0,2*Math.PI*t).exp.pro(100*T);
                return circle;
            }
            const data1 = CompVis._graph(id_ctx,func1,0,1,0.005,{radius:2,point_color:"#00f",timeout:10000});
            const data2 = CompVis._graph(id_ctx,func2,0,1,0.005,{line_color:"#00b500",timeout:10000});
            const data = [data1,data2];

            setInterval(() => {
                T += 0.1;
                CompVis._re_graph(data);
            },1000/60);
        </script>
    </body>
</html>
